// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zippiehq/cartesi-lambada-coprocessor/core/chainio (interfaces: AvsWriterer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/avs_writer.go -package=mocks github.com/zippiehq/cartesi-lambada-coprocessor/core/chainio AvsWriterer
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	contractBLSPubkeyRegistry "github.com/Layr-Labs/eigensdk-go/contracts/bindings/BLSPubkeyRegistry"
	contractBLSRegistryCoordinatorWithIndices "github.com/Layr-Labs/eigensdk-go/contracts/bindings/BLSRegistryCoordinatorWithIndices"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	contractLambadaCoprocessorTaskManager "github.com/zippiehq/cartesi-lambada-coprocessor/contracts/bindings/LambadaCoprocessorTaskManager"
	gomock "go.uber.org/mock/gomock"
)

// MockAvsWriterer is a mock of AvsWriterer interface.
type MockAvsWriterer struct {
	ctrl     *gomock.Controller
	recorder *MockAvsWritererMockRecorder
}

// MockAvsWritererMockRecorder is the mock recorder for MockAvsWriterer.
type MockAvsWritererMockRecorder struct {
	mock *MockAvsWriterer
}

// NewMockAvsWriterer creates a new mock instance.
func NewMockAvsWriterer(ctrl *gomock.Controller) *MockAvsWriterer {
	mock := &MockAvsWriterer{ctrl: ctrl}
	mock.recorder = &MockAvsWritererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsWriterer) EXPECT() *MockAvsWritererMockRecorder {
	return m.recorder
}

// DeregisterOperator mocks base method.
func (m *MockAvsWriterer) DeregisterOperator(arg0 context.Context, arg1 common.Address, arg2 []byte, arg3 contractBLSPubkeyRegistry.BN254G1Point) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterOperator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterOperator indicates an expected call of DeregisterOperator.
func (mr *MockAvsWritererMockRecorder) DeregisterOperator(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterOperator", reflect.TypeOf((*MockAvsWriterer)(nil).DeregisterOperator), arg0, arg1, arg2, arg3)
}

// RegisterNewTaskBatch mocks base method.
func (m *MockAvsWriterer) RegisterNewTaskBatch(arg0 context.Context, arg1 [32]byte, arg2 uint32, arg3 []byte) (contractLambadaCoprocessorTaskManager.ILambadaCoprocessorTaskManagerTaskBatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNewTaskBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(contractLambadaCoprocessorTaskManager.ILambadaCoprocessorTaskManagerTaskBatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterNewTaskBatch indicates an expected call of RegisterNewTaskBatch.
func (mr *MockAvsWritererMockRecorder) RegisterNewTaskBatch(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNewTaskBatch", reflect.TypeOf((*MockAvsWriterer)(nil).RegisterNewTaskBatch), arg0, arg1, arg2, arg3)
}

// RegisterOperatorWithAVSRegistryCoordinator mocks base method.
func (m *MockAvsWriterer) RegisterOperatorWithAVSRegistryCoordinator(arg0 context.Context, arg1 []byte, arg2 contractBLSRegistryCoordinatorWithIndices.BN254G1Point, arg3 string) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOperatorWithAVSRegistryCoordinator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOperatorWithAVSRegistryCoordinator indicates an expected call of RegisterOperatorWithAVSRegistryCoordinator.
func (mr *MockAvsWritererMockRecorder) RegisterOperatorWithAVSRegistryCoordinator(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOperatorWithAVSRegistryCoordinator", reflect.TypeOf((*MockAvsWriterer)(nil).RegisterOperatorWithAVSRegistryCoordinator), arg0, arg1, arg2, arg3)
}

// RespondTask mocks base method.
func (m *MockAvsWriterer) RespondTask(arg0 context.Context, arg1 contractLambadaCoprocessorTaskManager.ILambadaCoprocessorTaskManagerTaskBatch, arg2 contractLambadaCoprocessorTaskManager.ILambadaCoprocessorTaskManagerTask, arg3 [][32]byte, arg4 contractLambadaCoprocessorTaskManager.ILambadaCoprocessorTaskManagerTaskResponse, arg5 contractLambadaCoprocessorTaskManager.IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondTask", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RespondTask indicates an expected call of RespondTask.
func (mr *MockAvsWritererMockRecorder) RespondTask(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondTask", reflect.TypeOf((*MockAvsWriterer)(nil).RespondTask), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateStakes mocks base method.
func (m *MockAvsWriterer) UpdateStakes(arg0 context.Context, arg1 []common.Address) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStakes", arg0, arg1)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStakes indicates an expected call of UpdateStakes.
func (mr *MockAvsWritererMockRecorder) UpdateStakes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStakes", reflect.TypeOf((*MockAvsWriterer)(nil).UpdateStakes), arg0, arg1)
}
